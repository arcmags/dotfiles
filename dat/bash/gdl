#!/bin/bash
## gdl ::

[[ $0 != "${BASH_SOURCE[0]}" ]] && return 0
print_help() { cat <<'HELPDOC'
Usage:
  gdl [url...]

gallery-dl wrapper script.
HELPDOC
exit "${1:-0}" ;}; [[ $1 =~ ^(-H|--help)$ ]] && print_help

## settings ::
debug=0 nocolor=0
dir_in="$ADIR/img"
dir_gdl="$dir_in/gdl"
gdl_err="$dir_gdl/gdl.err" gdl_log="$dir_gdl/gdl.log" gdl_txt="$dir_gdl/gdl.txt"

## internal functions/variables ::
readonly -a deps=(curl gallery-dl wget)
args=("$@") urls=() urls_log=()
regex='^(.*\.vzntrsnc.pbz/)(tnyyrel|cvpgherf)(/[0-9]+)'

# colors, control sequences:
readonly clear_line=$'\e[2K'
black=$'\e[38;5;0m' blue=$'\e[38;5;12m' cyan=$'\e[38;5;14m' green=$'\e[38;5;10m'
grey=$'\e[38;5;8m' magenta=$'\e[38;5;13m' orange=$'\e[38;5;3m' red=$'\e[38;5;9m'
white=$'\e[38;5;15m' yellow=$'\e[38;5;11m' bold=$'\e[1m' off=$'\e[0m'
clear_colors() {
    export NO_COLOR=1 nocolor=1
    unset black blue cyan green grey magenta orange red white yellow bold off
}

# messages:
bin_printf() { printf "$@" ;}
[[ -f /usr/bin/printf ]] && bin_printf() { /usr/bin/printf "$@" ;}
msg() { printf "$bold$blue=> $off$white%s$off\n" "$*" ;}
msg2() { printf "$bold$blue > $off$white%s$off\n" "$*" ;}
msg2_warn() { printf "$bold${yellow} > $off$white%s$off\n" "$*" >&2 ;}
msg_error() { printf "$bold${red}E: $off$white%s$off\n" "$*" >&2 ;}
msg_good() { printf "$bold$green=> $off$white%s$off\n" "$*" ;}
msg_plain() { printf "$off$white  %s$off\n" "$*" ;}
msg_warn() { printf "$bold${yellow}W: $off$white%s$off\n" "$*" >&2 ;}
msg_cmd() { [[ $EUID -eq 0 ]] && printf "$bold$red:#" || printf "$bold$blue:$"
    printf "$off$white"; bin_printf ' %q' "$@"; printf "$off\n" ;}

# utils:
check_deps() {
    local _dep= _deps=("${deps[@]}") _errs=(); (($#)) && _deps=("$@")
    for _dep in "${_deps[@]}"; do is_cmd "$_dep" || _errs+=("$_dep"); done
    ((${#_errs[@]})) && msg_error "missing deps: ${_errs[*]}"
    return ${#_errs[@]}
}
check_internet() { ping -q -c1 -W2 google.com &>/dev/null ;}
is_cmd() { command -v "$1" &>/dev/null ;}
is_img() { [[ -f $1 ]] && identify "$1" &>/dev/null ;}
is_port() { [[ $1 =~ ^[1-9][0-9]*$ && $1 -lt 65536 ]] ;}

# error, exit, trap:
error() { msg_error "$*"; exit 3 ;}
trap_exit() { ((debug)) && msg_warn '[exit]' ;}
trap_int() { printf '\n'; ((debug)) && msg_warn '[sigint]'; exit 99 ;}

## main ::
trap trap_int INT
trap trap_exit EXIT

# set from env:
[[ -n $DEBUG ]] && debug=1
[[ -n $NO_COLOR || ! -t 1 || ! -t 2 ]] && clear_colors

# check for errors:
check_deps || exit
check_internet || error 'no internet connection'
[[ -z $ADIR ]] && error 'ADIR unset'
[[ ! -d $ADIR ]] && error "not directory: $ADIR"

# source gdl_log and gdl_txt:
[[ -f $gdl_log ]] && urls_log=($(<"$gdl_log"))
[[ -f $gdl_txt ]] && args=("$@" $(sed -E '/^\s*(#|$)/d' "$gdl_txt"))

# parse args:
regex="$(tr 'a-z' 'n-za-m' <<<"$regex")"
for arg in "${args[@]}"; do
    if [[ $arg =~ $regex ]]; then
        arg="${BASH_REMATCH[1]}gallery${BASH_REMATCH[3]}"
    fi
    found=0
    for url in "${urls[@]}"; do [[ $arg == "$url" ]] && { found=1; break ;}; done
    ((found)) && continue
    found=0
    for url in "${urls_log[@]}"; do [[ $arg == "$url" ]] && { found=1; break ;}; done
    ((found)) && { msg_good "$arg $green[done]"; continue ;}
    urls+=("$arg")
done

# process urls:
mkdir -p "$dir_in"
cd "$dir_in"
for url in "${urls[@]}"; do
    msg "$url $blue[starting]"
    if gallery-dl "$url"; then
        printf '%s\n' "$url" >> "$gdl_log"
        msg_good "$url $green[done]"
    else
        printf '%s\n' "$url" >> "$gdl_err"
        msg_error "$url $red[errors]"
    fi
done

# vim:ft=bash
