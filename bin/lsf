#!/bin/bash
## lsf ::

print_help() {
cat <<'HELPDOC'
NAME
    lsf

SYNOPSIS
    lsf [OPTION...]

DESCRIPTION
    List information on files in current directory.

OPTIONS
    -h, --human
        Print human readable file sizes (e.g. 26K ...)

    -s, --size
        Sort files by size.

    -H, --help
        Print help.
HELPDOC
}

## images ::
is_img() {
    identify "$1" &>/dev/null
}

img_size() {
    identify -format '%wx%h' "$@"
}

## parse args ::
args=()
flg_sortbysize=false
flg_human=false
#opt_x=
n_args=0
n_flgs=0
n_opts=0
args_parse() {
    local _args=("$@") a=0 arg="${_args[a]}" error_opt error_unknown
    while [ -n "$arg" ]; do case "$arg" in
        # flags:
        -s|--size)
            flg_sortbysize=true
            ((n_flgs++)); arg="${_args[((++a))]}" ;;
        -h|--human)
            flg_human=true
            ((n_flgs++)); arg="${_args[((++a))]}" ;;
        # options:
        #-x|--x-long)
            #opt_x="${_args[((++a))]}"
            #[ $# -le $a ] && error_opt
            #((n_opts++)); arg="${_args[((++a))]}" ;;
        # help:
        -H|--help)
            if [ "$(type -t print_help)" = 'function' ]; then
                print_help
            else
                msg 'no help info'
            fi
            exit 0 ;;
        # all flags:
        -[Hhs]*)
            # all flags and options:
            [[ ! "${arg:2:1}" =~ [Hhs] ]] && break
            _args[((a--))]="-${arg:2}"
            arg="${arg:0:2}" ;;
        # all options:
        #-[x]*)
            #_args[$a]="${arg:2}"
            #arg="${arg:0:2}"
            #((a--)) ;;
        # start args:
        --)
            ((a++))
            break ;;
        *)
            break ;;
    esac; done
    # get args:
    args=("${_args[@]:a}")
    n_args=${#args[@]}
}

## main() ::
args_parse "$@"

mapfile -t files < <(find . -maxdepth 1 -type f -printf '%f\n' | sort)
if [ "$flg_sortbysize" = 'true' ]; then
    mapfile -t files < <(du -bs "${files[@]}" | sort -n | cut -f2)
fi

for file in "${files[@]}"; do
    if [ "$flg_human" = 'true' ]; then
        file_size="$(du -hs "$file" | cut -f1)"
    else
        file_size="$(du -bs "$file" | cut -f1)"
    fi
    file_type="$(file -b "$file" | cut -f1 -d,)"
    printf '%s\t\e[0;38;5;14m%s\t\e[38;5;15m%s\e[0m\n' \
      "$(command ls --color=always "$file")" "$file_size" "$file_type"
done | column -t -s $'\t'

# vim:ft=bash
