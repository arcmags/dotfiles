#!/bin/bash
## ~/bin/futf ::

[[ $0 != "${BASH_SOURCE[0]}" ]] && return 0
print_help() { cat <<'HELPDOC'
Usage:
  futf [option...] <file...>

Convert file to utf-8 encoded unix text. By default: replace tabs with
spaces (except in makefiles), remove trailing whitespaces, remove
leading and trailing blank lines, and backup original file.

Options:
  -t, --tab <num>   spaces per tab (default: 4)
  -A, --ascii       convert to pure ascii
  -B, --keepblanks  keep leading and trailing blank lines
  -N, --nobackup    don't backup original file
  -S, --keepspaces  keep trailing whitespaces
  -T, --keeptabs    keep tabs
  -M, --nocolor     disable colored output
  -Q, --quiet       print nothing to stdout
  -V, --verbose     print more verbose information
  -H, -h, --help    print help and exit

Environment:
  NO_COLOR      disable colored output
  QUIET         run silently
  VERBOSE       run verbosely
HELPDOC
exit "${1:-0}" ;}
[[ $1 =~ ^(-H|-h|--help)$ ]] && print_help

## settings ::
debug=0 nocolor=0 quiet=0 verbose=0
ascii=0 keepblanks=0 keepspaces=0 keeptabs=0 nobackup=0
overwrite=0 tab=4
ext_org='_org'

## internal functions/variables ::
readonly -a args=("$@"); args_options=() args_positionals=()
readonly -a deps=(cmp dos2unix expand iconv uchardet)
readonly -a opts=(-t: --tab: -A --ascii -B --keepblanks
    -N --nobackup -S --keepspaces -T --keeptabs
    -M --nocolor -Q --quiet -V --verbose -H -h --help)
files_tmp=() enc= ext= file= file_tmp= file_tmp1= name=

# colors:
black=$'\e[38;5;0m' blue=$'\e[38;5;12m' cyan=$'\e[38;5;14m'
green=$'\e[38;5;10m' grey=$'\e[38;5;8m' magenta=$'\e[38;5;13m'
orange=$'\e[38;5;3m' red=$'\e[38;5;9m' white=$'\e[38;5;15m'
yellow=$'\e[38;5;11m' bold=$'\e[1m' off=$'\e[0m'
clear_colors() {
    export NO_COLOR=true; nocolor=1
    unset black blue cyan green grey magenta orange red white yellow bold off
}

# messages:
msg() { printf "$bold$blue=> $off$white%s$off\n" "$*" ;}
msg2() { printf "$bold$blue > $off$white%s$off\n" "$*" ;}
msg_error() { printf "$bold${red}E: $off$white%s$off\n" "$*" >&2 ;}
msg_good() { printf "$bold$green=> $off$white%s$off\n" "$*" ;}
msg_plain() { printf "$off$white  %s$off\n" "$*" ;}
msg_warn() { printf "$bold${yellow}W: $off$white%s$off\n" "$*" >&2 ;}
msg_cmd() {
    local _printf='printf'; [[ -f /usr/bin/printf ]] && _printf='/usr/bin/printf'
    [[ $EUID -eq 0 ]] && printf "$bold$red:#" || printf "$bold$blue:$"
    printf "$off$white"; "$_printf" ' %q' "$@"; printf "$off\n"
}

# utils:
check_deps() {
    local deps_err=()
    for dep in "${deps[@]}"; do is_cmd "$dep" || deps_e+=("$dep"); done
    [[ ${#deps_err} -gt 0 ]] && msg_error "missing deps: ${deps_err[*]}"
    return ${#deps_err[@]}
}
is_cmd() { command -v "$1" &>/dev/null ;}

parse_args() {
    local a=0 opt= sflgs= sopts= arg="${args[0]}"
    local -a lflgs=() lopts=()
    args_options=() args_positionals=()
    bad_opt() { msg_error "unrecognized option: -${arg:2:1}" ;}
    bad_optarg() { msg_error "option requires an argument: $arg" ;}
    bad_flg() { msg_error "option does not take argument: ${arg%%=*}" ;}
    for opt in "${opts[@]}"; do case "$opt" in
        -?) sflgs="$sflgs${opt:1}" ;;
        -?:) sopts="$sopts${opt:1:1}" ;;
        *:) lopts+=("${opt:0:-1}") ;;
        *) lflgs+=("$opt") ;;
    esac; done
    while [[ -n $arg ]]; do case "$arg" in
        --) ((a++)); break ;;
        -[$sflgs]) args_options+=("$arg") ;;
        -[$sflgs]*) [[ ! $sflgs$sopts =~ ${arg:2:1} ]] && { bad_opt; return 3 ;}
            args_options+=("${arg:0:2}") arg="-${arg:2}"; continue ;;
        -[$sopts]) [[ $((${#args[@]}-a)) -le 1 ]] && { bad_optarg; return 3 ;}
            args_options+=("$arg" "${args[((++a))]}") ;;
        -[$sopts]*) args_options+=("${arg:0:2}" "${arg:2}") ;;
        *=*) [[ " ${lflgs[*]} " =~ " ${arg%%=*} " ]] && { bad_flg; return 3 ;}
            [[ " ${lopts[*]} " =~ " ${arg%%=*} " ]] || break
            args_options+=("${arg%%=*}" "${arg#*=}") ;;
        *) if [[ " ${lflgs[*]} " =~ " $arg " ]]; then
                args_options+=("$arg")
            elif [[ " ${lopts[*]} " =~ " $arg " ]]; then
                [[ ${#args[@]} -le $((a+1)) ]] && { bad_optarg; return 3 ;}
                args_options+=("$arg" "${args[((++a))]}")
            else break; fi ;;
    esac; arg="${args[((++a))]}"; done
    args_positionals=("${args[@]:a}")
}

# error, exit, trap:
error() { msg_error "$*"; exit 3 ;}
trap_exit() { rm -f "${files_tmp[@]}"; ((debug)) && msg_warn '[exit]' ;}
trap_int() { printf '\n'; ((debug)) && msg_warn '[sigint]'; exit 99 ;}

## main ::
trap trap_int INT
trap trap_exit EXIT

# set from env:
[[ -n $DEBUG ]] && debug=1
[[ -n $NO_COLOR || ! -t 1 || ! -t 2 ]] && clear_colors
[[ -n $QUIET ]] && quiet=1 verbose=0
[[ -n $VERBOSE ]] && quiet=0 verbose=1

# parse args:
parse_args || exit
set -- "${args_options[@]}"
while [[ -n $1 ]]; do case "$1" in
    -t|--tab) shift; tab="$1" ;;
    -A|--ascii) ascii=1 ;;
    -B|--keepblanks) keepblanks=1 ;;
    -N|--nobackup) nobackup=1 ;;
    -S|--keepspaces) keepspaces=1 ;;
    -T|--keeptabs) keeptabs=1 ;;
    -Q|--quiet) quiet=1 verbose=0 ;;
    -V|--verbose) quiet=0 verbose=1 ;;
    -M|--nocolor) clear_colors ;;
    -h|-H|--help) print_help ;;
esac; shift; done

# check for errors:
check_deps || exit
[[ $tab =~ ^[1-9][0-9]*$ ]] || error "invalid tab width: $tab"

for file in "${args_positionals[@]}"; do
    [[ -d $file ]] && { msg_warn "directory: $file"; continue ;}
    [[ -f $file ]] || { msg_warn "not found: $file"; continue ;}

    # create and track tmp files:
    file_tmp="$(mktemp --tmpdir tmp.XXX)"
    file_tmp1="$(mktemp --tmpdir tmp.XXX)"
    files_tmp+=("$file_tmp" "$file_tmp1")
    ((verbose)) && msg_cmd cp "$file" "$file_tmp"
    cp "$file" "$file_tmp"

    # convert to unix (remove any \r, remove BOM, ensure EOL on last line):
    ((verbose)) && msg_cmd dos2unix -e -q -r -n "$file_tmp" "$file_tmp1"
    if dos2unix -e -q -r -n "$file_tmp" "$file_tmp1" &>/dev/null; then
        file_tmp="$file_tmp1"
    else
        msg_warn "dos2unix error: $file"
    fi

    # ensure utf-8 encoding:
    ((verbose)) && msg_cmd uchardet "$file_tmp"
    if enc="$(uchardet "$file_tmp" 2>/dev/null)"; then
        ((verbose)) && msg2 "$enc"
        if [[ $enc != UTF-8 && $enc != ASCII ]]; then
            file_tmp1="$(mktemp --tmpdir tmp.XXX)"; files_tmp+=("$file_tmp1")
            cmd_iconv=(iconv -f "$enc" -t UTF-8 -o "$file_tmp1" "$file_tmp")
            [[ $enc == unknown ]] && cmd_iconv=(iconv -t UTF-8 -o "$file_tmp1" "$file_tmp")
            ((verbose)) && msg_cmd "${cmd_iconv[@]}"
            if "${cmd_iconv[@]}" &>/dev/null; then
                file_tmp="$file_tmp1"
            else
                msg_error "iconv error: $file"
            fi
        fi
    else
        msg_error "uchardet error: $file"
    fi

    # replace tabs with spaces:
    if ! ((keeptabs)) && [[ ${arg,,} != makefile ]]; then
        file_tmp1="$(mktemp --tmpdir tmp.XXX)"; files_tmp+=("$file_tmp1")
        ((verbose)) && msg_cmd expand -t "$tab" "$file_tmp" '>' "$file_tmp1"
        if expand -t "$tab" "$file_tmp" > "$file_tmp1"; then
            file_tmp="$file_tmp1"
        else
            msg_n 'expand error: %s' "$arg"
    fi; fi

    # convert to ascii:
    if ((ascii)); then
        file_tmp1="$(mktemp --tmpdir tmp.XXX)"; files_tmp+=("$file_tmp1")
        ((verbose)) && msg_cmd iconv -f utf-8 -t ascii//TRANSLIT -o "$file_tmp1" "$file_tmp"
        if iconv -f utf-8 -t ascii//TRANSLIT -o "$file_tmp1" "$file_tmp"; then
            file_tmp="$file_tmp1"
        else
            msg_n 'iconv error: %s' "$arg"
    fi; fi

    # strip trailing whitespaces:
    if ! ((keepspaces)); then
        ((verbose)) && msg_cmd sed -i 's/\s\+$//' "$file_tmp"
        sed -i 's/\s\+$//' "$file_tmp"
    fi

    # remove leading/trailing blank lines:
    if ! ((keepblanks)); then
        ((verbose)) && msg_cmd sed -i -e :a -e '/./,$!d;/^\n*$/{$d;N;};/\n$/ba' "$file_tmp"
        sed -i -e :a -e '/./,$!d;/^\n*$/{$d;N;};/\n$/ba' "$file_tmp"
    fi

    # cp/mv new file:
    if ! cmp -s "$file" "$file_tmp"; then
        if ! ((nobackup)); then
            name="$file" ext=
            [[ $file =~ ^(.+)(\..*) ]] && ext="${BASH_REMATCH[2]}" name="${BASH_REMATCH[1]}"
            cp "$file" "$name${ext_org}$ext"
        fi
        ((verbose)) && msg_cmd cp "$file_tmp" "$file"
        cp "$file_tmp" "$file"
        ((quiet)) || msg "$file ${green}[updated]"
    elif ((verbose)); then
        msg "$file ${blue}[unchanged]"
    fi
done

# vim:ft=bash
