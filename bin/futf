#!/bin/bash
## ~/bin/futf ::

[[ $0 != "${BASH_SOURCE[0]}" ]] && return 0
print_help() { cat <<'HELPDOC'
Usage:
  futf [option...] [file...]

Convert files or stdin to utf-8 encoded unix text:
  + convert to UTF-8 file encoding
  + remove BOM
  + remove carriage returns
  + ensure EOL on last line
  + replace tabs with spaces (default: true)
  + remove trailing whitespaces from every line (default: true)
  + remove leading and trailing blank lines (default: true)
  - convert to pure ASCII (default: false)

Files are backuped up and overwritten if any changes are made.

Options:
  -s, --suffix <str>  backup filename suffix (default: _bak)
  -t, --tab <num>     spaces per tab (default: 4)
  -A, --ascii         convert to pure ascii
  -B, --keepblanks    keep leading and trailing blank lines
  -N, --nobackup      don't backup original file
  -S, --keepspaces    keep trailing whitespaces
  -T, --keeptabs      keep tabs
  -M, --nocolor       disable colored output
  -Q, --quiet         print nothing to stdout
  -V, --verbose       print more verbose information
  -H, --help          print help and exit

Environment:
  NO_COLOR      disable colored output
  QUIET         run silently
  VERBOSE       run verbosely
HELPDOC
exit "${1:-0}" ;}; [[ $1 =~ ^(-H|--help)$ ]] && print_help

## settings ::
debug=0 nocolor=0 quiet=0 verbose=0
ascii=0 keepblanks=0 keepspaces=0 keeptabs=0 nobackup=0 overwrite=0
suffix='_bak' tab=4

## internal functions/variables ::
readonly -a args=("$@"); args_options=() args_positionals=()
readonly -a deps=(cmp dos2unix expand iconv uchardet)
readonly -a opts=(-s: --suffix: -t: --tab: -A --ascii -B --keepblanks
    -N --nobackup -S --keepspaces -T --keeptabs
    -M --nocolor -Q --quiet -V --verbose -H --help)
files=() files_err=() files_tmp=() file= file_tmp= file_tmp1=
enc= ext= name= stdin=0

# colors:
black=$'\e[38;5;0m' blue=$'\e[38;5;12m' cyan=$'\e[38;5;14m' green=$'\e[38;5;10m'
grey=$'\e[38;5;8m' magenta=$'\e[38;5;13m' orange=$'\e[38;5;3m' red=$'\e[38;5;9m'
white=$'\e[38;5;15m' yellow=$'\e[38;5;11m' bold=$'\e[1m' off=$'\e[0m'
clear_colors() {
    export NO_COLOR=1 nocolor=1
    unset black blue cyan green grey magenta orange red white yellow bold off
}

# messages:
bin_printf() { printf "$@" ;}
[[ -f /usr/bin/printf ]] && bin_printf() { /usr/bin/printf "$@" ;}
msg() { printf "$bold$blue=> $off$white%s$off\n" "$*" ;}
msg2() { printf "$bold$blue > $off$white%s$off\n" "$*" ;}
msg_error() { printf "$bold${red}E: $off$white%s$off\n" "$*" >&2 ;}
msg_good() { printf "$bold$green=> $off$white%s$off\n" "$*" ;}
msg_plain() { printf "$off$white  %s$off\n" "$*" ;}
msg_warn() { printf "$bold${yellow}W: $off$white%s$off\n" "$*" >&2 ;}
msg_cmd() { [[ $EUID -eq 0 ]] && printf "$bold$red:#" || printf "$bold$blue:$"
    printf "$off$white"; bin_printf ' %q' "$@"; printf "$off\n" ;}

# utils:
check_deps() {
    local _dep= _deps=("${deps[@]}") _errs=(); [[ -n $1 ]] && _deps=("$@")
    for _dep in "${_deps[@]}"; do is_cmd "$_dep" || _errs+=("$_dep"); done
    ((${#_errs[@]})) && msg_error "missing deps: ${_errs[*]}"
    return ${#_errs[@]}
}
is_cmd() { command -v "$1" &>/dev/null ;}

parse_args() {
    local _a=0 _opt= _sflgs= _sopts= _arg="${args[0]}"
    local -a _lflgs=() _lopts=()
    args_options=() args_positionals=()
    _eopt() { msg_error "unrecognized option: -${_arg:2:1}" ;}
    _eoptarg() { msg_error "option requires an argument: $_arg" ;}
    _eflg() { msg_error "option does not take argument: ${_arg%%=*}" ;}
    for _opt in "${opts[@]}"; do case "$_opt" in
        -?) _sflgs="$_sflgs${_opt:1}" ;;
        -?:) _sopts="$_sopts${_opt:1:1}" ;;
        *:) _lopts+=("${_opt:0:-1}") ;;
        *) _lflgs+=("$_opt") ;;
    esac; done
    while [[ -n $_arg ]]; do case "$_arg" in
        --) ((_a++)); break ;;
        -[$_sflgs]) args_options+=("$_arg") ;;
        -[$_sflgs]*) [[ ! $_sflgs$_sopts =~ ${_arg:2:1} ]] && { _eopt; return 3 ;}
            args_options+=("${_arg:0:2}") _arg="-${_arg:2}"; continue ;;
        -[$_sopts]) [[ $((${#args[@]}-_a)) -le 1 ]] && { _eoptarg; return 3 ;}
            args_options+=("$_arg" "${args[((++_a))]}") ;;
        -[$_sopts]*) args_options+=("${_arg:0:2}" "${_arg:2}") ;;
        *=*) [[ " ${_lflgs[*]} " =~ " ${_arg%%=*} " ]] && { _eflg; return 3 ;}
            [[ " ${_lopts[*]} " =~ " ${_arg%%=*} " ]] || break
            args_options+=("${_arg%%=*}" "${_arg#*=}") ;;
        *) if [[ " ${_lflgs[*]} " =~ " $_arg " ]]; then
                args_options+=("$_arg")
            elif [[ " ${_lopts[*]} " =~ " $_arg " ]]; then
                [[ ${#args[@]} -le $((_a+1)) ]] && { _eoptarg; return 3 ;}
                args_options+=("$_arg" "${args[((++_a))]}")
            else break; fi ;;
    esac; _arg="${args[((++_a))]}"; done
    args_positionals=("${args[@]:_a}")
}

# error, exit, trap:
error() { msg_error "$*"; exit 3 ;}
trap_exit() { rm -f "${files_tmp[@]}"; ((debug)) && msg_warn '[exit]' ;}
trap_int() { printf '\n'; ((debug)) && msg_warn '[sigint]'; exit 99 ;}

## main ::
trap trap_int INT
trap trap_exit EXIT

# set from env:
[[ -n $DEBUG ]] && debug=1
[[ -n $NO_COLOR || ! -t 1 || ! -t 2 ]] && clear_colors
[[ -n $QUIET ]] && quiet=1 verbose=0
[[ -n $VERBOSE ]] && quiet=0 verbose=1

# parse args:
parse_args || exit
set -- "${args_options[@]}"
while [[ -n $1 ]]; do case "$1" in
    -s|--suffix) shift; suffix="$1" ;;
    -t|--tab) shift; tab="$1" ;;
    -A|--ascii) ascii=1 ;;
    -B|--keepblanks) keepblanks=1 ;;
    -N|--nobackup) nobackup=1 ;;
    -S|--keepspaces) keepspaces=1 ;;
    -T|--keeptabs) keeptabs=1 ;;
    -Q|--quiet) quiet=1 verbose=0 ;;
    -V|--verbose) quiet=0 verbose=1 ;;
    -M|--nocolor) clear_colors ;;
    -H|--help) print_help ;;
esac; shift; done

# check for errors:
check_deps || exit
[[ -z $suffix ]] && error 'backup suffix empty'
[[ $tab =~ ^[1-9][0-9]*$ ]] || error "invalid tab width: $tab"

# use stdin if no files given:
if [[ ${#args_positionals[@]} -eq 0 ]]; then
    read -t0 || { ((verbose)) && msg_warn 'no stdin'; exit ;}
    file_tmp="$(mktemp --tmpdir tmp.XXX)"; files_tmp+=("$file_tmp")
    files=("$file_tmp")
    cat /dev/stdin > "$file_tmp"
    stdin=1
# check files:
else for file in "${args_positionals[@]}"; do
        [[ -f $file ]] || { files_err+=("$file"); continue ;}
        files+=("$file")
    done
    [[ ${#files_err[@]} -gt 0 ]] && msg_warn "file errors: ${files_err[*]}"
fi

for file in "${files[@]}"; do
    file_tmp="$(mktemp --tmpdir tmp.XXX)" file_tmp1="$(mktemp --tmpdir tmp.XXX)"
    files_tmp+=("$file_tmp" "$file_tmp1")
    ((verbose)) && msg_cmd cp "$file" "$file_tmp"
    cp "$file" "$file_tmp"

    # convert to unix (remove any \r, remove BOM, ensure EOL on last line):
    ((verbose)) && msg_cmd dos2unix -e -q -r -n "$file_tmp" "$file_tmp1"
    if dos2unix -e -q -r -n "$file_tmp" "$file_tmp1" &>/dev/null; then
        file_tmp="$file_tmp1"
    else
        msg_warn "dos2unix error: $file"
    fi

    # ensure utf-8 encoding:
    ((verbose)) && msg_cmd uchardet "$file_tmp"
    if enc="$(uchardet "$file_tmp" 2>/dev/null)"; then
        ((verbose)) && msg2 "$enc"
        if [[ $enc != UTF-8 && $enc != ASCII ]]; then
            file_tmp1="$(mktemp --tmpdir tmp.XXX)"; files_tmp+=("$file_tmp1")
            cmd_iconv=(iconv -f "$enc" -t UTF-8 -o "$file_tmp1" "$file_tmp")
            [[ $enc == unknown ]] && cmd_iconv=(iconv -t UTF-8 -o "$file_tmp1" "$file_tmp")
            ((verbose)) && msg_cmd "${cmd_iconv[@]}"
            if "${cmd_iconv[@]}" &>/dev/null; then
                file_tmp="$file_tmp1"
            else
                msg_error "iconv error: $file"
    fi; fi; else
        msg_error "uchardet error: $file"
    fi

    # replace tabs with spaces:
    if ! ((keeptabs)) && [[ ${arg,,} != makefile ]]; then
        file_tmp1="$(mktemp --tmpdir tmp.XXX)"; files_tmp+=("$file_tmp1")
        ((verbose)) && msg_cmd expand -t "$tab" "$file_tmp" '>' "$file_tmp1"
        if expand -t "$tab" "$file_tmp" > "$file_tmp1"; then
            file_tmp="$file_tmp1"
        else
            msg_n 'expand error: %s' "$arg"
    fi; fi

    # convert to ascii:
    if ((ascii)); then
        file_tmp1="$(mktemp --tmpdir tmp.XXX)"; files_tmp+=("$file_tmp1")
        ((verbose)) && msg_cmd iconv -f utf-8 -t ascii//TRANSLIT -o "$file_tmp1" "$file_tmp"
        if iconv -f utf-8 -t ascii//TRANSLIT -o "$file_tmp1" "$file_tmp"; then
            file_tmp="$file_tmp1"
        else
            msg_n 'iconv error: %s' "$arg"
    fi; fi

    # strip trailing whitespaces:
    if ! ((keepspaces)); then
        ((verbose)) && msg_cmd sed -i 's/\s\+$//' "$file_tmp"
        sed -i 's/\s\+$//' "$file_tmp"
    fi

    # remove leading/trailing blank lines:
    if ! ((keepblanks)); then
        ((verbose)) && msg_cmd sed -i -e :a -e '/./,$!d;/^\n*$/{$d;N;};/\n$/ba' "$file_tmp"
        sed -i -e :a -e '/./,$!d;/^\n*$/{$d;N;};/\n$/ba' "$file_tmp"
    fi

    if ((stdin)); then
        cat "$file_tmp"
    # cp/mv new file:
    elif ! cmp -s "$file" "$file_tmp"; then
        if ! ((nobackup)); then
            name="$file" ext=
            [[ $file =~ ^(.+)(\..*) ]] && ext="${BASH_REMATCH[2]}" name="${BASH_REMATCH[1]}"
            cp "$file" "$name$suffix$ext"
        fi
        ((verbose)) && msg_cmd cp "$file_tmp" "$file"
        cp "$file_tmp" "$file"
        ((quiet)) || msg "$file ${green}[updated]"
    elif ! ((quiet)); then
        msg "$file"
    fi
done

# vim:ft=bash
