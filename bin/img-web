#!/bin/bash
## img-web ::

[[ $0 != "${BASH_SOURCE[0]}" ]] && return 0
print_help() { cat <<'HELPDOC'
Usage:
  img-web [option...] <image...>

Scale image down to web sized image and thumbnail.

Options:
  -q, --quality         web image jpg quality (default: 84)
  -s, --side            maximum side length of web images (default: 3000)
  -t, --thumb           thumbnail size (default: 200x150)
  -u, --thumb-quality   thumbnail jpg quality (default: 72)
  -M, --nocolor         disable colored output
  -Q, --quiet           print nothing to stdout
  -V, --verbose         print more verbose information
  -H, --help            print help and exit

Environment:
  NO_COLOR      disable colored output
  QUIET         run silently
  VERBOSE       run verbosely
HELPDOC
exit "${1:-0}" ;}; [[ $1 =~ ^(-H|--help)$ ]] && print_help

## settings ::
debug=0 nocolor=0 quiet=0 verbose=0
dir_thumb='web/thumbs'
dir_web='web'
ext_thumb='_thumb'
ext_web='_web'
thumb_quality=72
thumb_size='200x150'
web_quality=84
web_side_max=3000

## internal functions/variables ::
readonly -a args=("$@"); args_options=() args_positionals=()
readonly -a deps=(exiftool identify magick)
readonly -a opts=(-q: --quality: -s: --side: -t: --thumb: -M -u: --thumb-quality:
    -M --nocolor -Q --quiet -V --verbose -H --help)
cmd=() imgs=()
arg_resize= img= img_h= img_thumb= img_w= img_web= thumb_h= thumb_w= tmp_h= tmp_w=

# colors, control sequences:
readonly clear_line=$'\e[2K'
black=$'\e[38;5;0m' blue=$'\e[38;5;12m' cyan=$'\e[38;5;14m' green=$'\e[38;5;10m'
grey=$'\e[38;5;8m' magenta=$'\e[38;5;13m' orange=$'\e[38;5;3m' red=$'\e[38;5;9m'
white=$'\e[38;5;15m' yellow=$'\e[38;5;11m' bold=$'\e[1m' off=$'\e[0m'
clear_colors() {
    export NO_COLOR=1 nocolor=1
    unset black blue cyan green grey magenta orange red white yellow bold off
}

# messages:
bin_printf() { printf "$@" ;}
[[ -f /usr/bin/printf ]] && bin_printf() { /usr/bin/printf "$@" ;}
msg() { printf "$bold$blue=> $off$white%s$off\n" "$*" ;}
msg2() { printf "$bold$blue > $off$white%s$off\n" "$*" ;}
msg2_warn() { printf "$bold${yellow} > $off$white%s$off\n" "$*" >&2 ;}
msg_error() { printf "$bold${red}E: $off$white%s$off\n" "$*" >&2 ;}
msg_good() { printf "$bold$green=> $off$white%s$off\n" "$*" ;}
msg_plain() { printf "$off$white  %s$off\n" "$*" ;}
msg_warn() { printf "$bold${yellow}W: $off$white%s$off\n" "$*" >&2 ;}
msg_cmd() { [[ $EUID -eq 0 ]] && printf "$bold$red:#" || printf "$bold$blue:$"
    printf "$off$white"; bin_printf ' %q' "$@"; printf "$off\n" ;}

# utils:
check_deps() {
    local _dep= _deps=("${deps[@]}") _errs=(); (($#)) && _deps=("$@")
    for _dep in "${_deps[@]}"; do is_cmd "$_dep" || _errs+=("$_dep"); done
    ((${#_errs[@]})) && msg_error "missing deps: ${_errs[*]}"
    return ${#_errs[@]}
}
is_cmd() { command -v "$1" &>/dev/null ;}
is_img() { [[ -f $1 ]] && identify "$1" &>/dev/null ;}

parse_args() {
    local _a=0 _opt= _sflgs= _sopts= _arg="${args[0]}" _nobreak=0
    local -a _lflgs=() _lopts=()
    args_options=() args_positionals=()
    [[ $1 == nobreak ]] && _nobreak=1
    _eopt() { msg_error "unrecognized option: -${_arg:2:1}" ;}
    _eoptarg() { msg_error "option requires an argument: $_arg" ;}
    _eflg() { msg_error "option does not take argument: ${_arg%%=*}" ;}
    for _opt in "${opts[@]}"; do case "$_opt" in
        -?) _sflgs="$_sflgs${_opt:1}" ;;
        -?:) _sopts="$_sopts${_opt:1:1}" ;;
        *:) _lopts+=("${_opt:0:-1}") ;;
        *) _lflgs+=("$_opt") ;;
    esac; done
    while [[ -n $_arg ]]; do case "$_arg" in
        --) ((_a++)); break ;;
        -[$_sflgs]) args_options+=("$_arg") ;;
        -[$_sflgs]*) [[ ! $_sflgs$_sopts =~ ${_arg:2:1} ]] && { _eopt; return 3 ;}
            args_options+=("${_arg:0:2}") _arg="-${_arg:2}"; continue ;;
        -[$_sopts]) [[ $((${#args[@]}-_a)) -le 1 ]] && { _eoptarg; return 3 ;}
            args_options+=("$_arg" "${args[((++_a))]}") ;;
        -[$_sopts]*) args_options+=("${_arg:0:2}" "${_arg:2}") ;;
        *=*) [[ " ${_lflgs[*]} " =~ " ${_arg%%=*} " ]] && { _eflg; return 3 ;}
            [[ " ${_lopts[*]} " =~ " ${_arg%%=*} " ]] || break
            args_options+=("${_arg%%=*}" "${_arg#*=}") ;;
        *) if [[ " ${_lflgs[*]} " =~ " $_arg " ]]; then
                args_options+=("$_arg")
            elif [[ " ${_lopts[*]} " =~ " $_arg " ]]; then
                [[ ${#args[@]} -le $((_a+1)) ]] && { _eoptarg; return 3 ;}
                args_options+=("$_arg" "${args[((++_a))]}")
            elif ((_nobreak)); then args_options+=("$_arg")
            else break; fi ;;
    esac; _arg="${args[((++_a))]}"; done
    args_positionals+=("${args[@]:_a}")
}

parse_path() {
    local _path="${1:$path}"
    path_basename="$_path" path_dir= path_ext=
    [[ ${path_basename: -1} == / ]] && path_basename="${path_basename:0:-1}"
    if [[ $path_basename =~ / ]]; then
        path_dir="${path_basename%/*}/" path_basename="${path_basename##*/}"
        [[ ${path_dir:0:2} == ./ ]] && path_dir="${path_dir:2}"
    fi; path_name="$path_basename"
    if [[ $path_basename =~ ^(.+)(\..*) ]]; then
        path_ext="${BASH_REMATCH[2]}" path_name="${BASH_REMATCH[1]}"
    fi
}

# error, exit, trap:
error() { msg_error "$*"; exit 3 ;}
trap_exit() { ((debug)) && msg_warn '[exit]' ;}
trap_int() { printf '\n'; ((debug)) && msg_warn '[sigint]'; exit 99 ;}

## main ::
trap trap_int INT
trap trap_exit EXIT

# set from env:
[[ -n $DEBUG ]] && debug=1
[[ -n $NO_COLOR || ! -t 1 || ! -t 2 ]] && clear_colors
[[ -n $QUIET ]] && quiet=1 verbose=0
[[ -n $VERBOSE ]] && quiet=0 verbose=1

# parse args:
parse_args || exit
set -- "${args_options[@]}"
while [[ -n $1 ]]; do case "$1" in
    -q|--quality) shift; web_quality="$1" ;;
    -s|--side) shift; web_side_max="$1" ;;
    -t|--thumb) shift; thumb_size="$1" ;;
    -u|--thumb-quality) shift; thumb_quality="$1" ;;
    -Q|--quiet) quiet=1 verbose=0 ;;
    -V|--verbose) quiet=0 verbose=1 ;;
    -M|--nocolor) clear_colors ;;
    -h|-H|--help) print_help ;;
esac; shift; done

# check for errors:
check_deps || exit
[[ $web_side_max =~ ^[1-9][0-9][0-9]+$ ]] || error "invalid side length: $web_side_max"
[[ $thumb_size =~ ^[1-9][0-9]+x[1-9][0-9]+$ ]] || error "invalid thumb size: $thumb_size"
[[ $thumb_quality =~ ^([1-9]|[1-9][0-9]|100)$ ]] || error "invalid jpg quality: $thumb_quality"
[[ $web_quality =~ ^([1-9]|[1-9][0-9]|100)$ ]] || error "invalid jpg quality: $web_quality"

# set thumb height, width:
thumb_h="${thumb_size#*x}"
thumb_w="${thumb_size%x*}"

# check input images:
for img in "${args_positionals[@]}"; do
    is_img "$img" || { msg_warn "image error: $img"; continue ;}
    imgs+=("$img")
done

[[ ${#imgs[@]} -eq 0 ]] && exit
for img in "${imgs[@]}"; do
    # set web and thumb image filename:
    parse_path "$img"
    img_w="$(identify -format '%w %h' "$img")"
    img_h="${img_w#* }" img_w="${img_w% *}"
    img_thumb_basename="${path_name}${ext_thumb}.jpg"
    img_web_basename="${path_name}${ext_web}.jpg"
    img_thumb="${path_dir}${dir_thumb}/${img_thumb_basename}"
    img_web="${path_dir}${dir_web}/${img_web_basename}"
    mkdir -p "${path_dir}${dir_thumb}" "${path_dir}${dir_web}"
    ((quiet)) || msg "$path_basename $bold$blue->$off$white $img_thumb_basename$bold$blue +$off$white $img_web_basename"

    # create web image:
    cmd=(magick "$img" -quality "$web_quality" "$img_web")
    if [[ $img_h -gt $web_side_max || $img_w -gt $web_side_max ]]; then
        # scale image down to max side length:
        arg_resize="x${web_side_max}"
        [[ $img_h -lt $img_w ]] && arg_resize="${web_side_max}x"
        cmd=(magick "$img" -resize "$arg_resize" -quality "$web_quality" "$img_web")
    elif [[ ${path_ext,,} =~ ^\.jpe?g$ ]]; then
        # copy image if already small enough:
        cmd=(cp "$img" "$img_web")
    fi
    ((verbose)) && msg_cmd "${cmd[@]}"
    "${cmd[@]}"

    # create web thumb image:
    tmp_h=$((thumb_w * img_h / img_w))
    tmp_w=$((thumb_h * img_w / img_h))
    cmd=(magick "$img" -resize)
    if [[ $((tmp_h - thumb_h)) -gt 4 ]]; then
        # scale image down and crop to height:
        cmd+=("${thumb_w}x" -crop "${thumb_w}x${thumb_h}+0+$(((tmp_h-thumb_h)/2))")
    elif [[ $((tmp_h - thumb_h)) -lt -4 ]]; then
        # scale image down and crop to width:
        cmd+=("x${thumb_h}" -crop "${thumb_w}x${thumb_h}+$(((tmp_w-thumb_w)/2))+0")
    else
        # scale image down:
        cmd+=("${thumb_w}x${thumb_h}")
    fi
    cmd+=(-quality "$thumb_quality" "$img_thumb")
    ((verbose)) && msg_cmd "${cmd[@]}"
    "${cmd[@]}"

    # clear metadata:
    cmd=(exiftool -quiet -overwrite_original -all= "$img_web" "$img_thumb")
    ((verbose)) && msg_cmd "${cmd[@]}"
    "${cmd[@]}"
done

# vim:ft=bash
