#!/bin/bash
## img-upscale ::

print_help() {
cat <<'HELPDOC'
NAME
    img-upscale - upscale images

SYNOPSIS
    img-upscale [OPTION...] <IMAGE...>

DESCRIPTION
    Upscale images with waifu2x.

OPTIONS
    -J, --jpg
        Output to jpg file.

    -P, --png
        Output to png file.

    -Q, --quiet
        Suppress all messages.

    -V, --verbose
        Print executed commands.

    -m, --model MODEL
        Set upscale model (anime/cunet/photo, default=cunet).

    -n, --noise LEVEL
        Set denoise level (-1/0/1/2/3, default=0).

    -q, --quality LEVEL
        Set jpg quality level (0-100, default=92).

    -s, --scale LEVEL
        Set upscale level (1/2/4/8/16/32, default=2).

    -H, --help
        Print help.
HELPDOC
}

# control:
ext=
flg_success=false
img=
img_out=
img_tmp=
model=
path_models='/usr/share/waifu2x-ncnn-vulkan/models-'
reqs=(identify magick waifu2x-ncnn-vulkan)

# args:
a=0 arg="$1" args=("$@")
flg_quiet=false
flg_verbose=false
opt_model=cunet
opt_noise=0
opt_qual=92
opt_scale=2
opt_type=

## functions ::
error() { msg_error "$@"; exit 5 ;}
msg() { printf "\e[1;38;5;12m=> \e[0;38;5;15m$1\e[0m\n" "${@:2}" ;}
msg_cmd() { printf "\e[1;38;5;12m $ \e[0;38;5;15m$1\e[0m\n" "${@:2}" ;}
msg_error() { printf "\e[1;38;5;9mE: \e[0;38;5;15m$1\e[0m\n" "${@:2}" >&2 ;}
msg_to() { msg "$1$(printf ' \e[1;38;5;12m-> \e[0;38;5;15m%s\e[0m' "${@:2}")" ;}
is_img() { [ -f "$1" ] && identify "$1" &>/dev/null ;}

## main ::
while [ -n "$arg" ]; do case "$arg" in
    -H|--help) print_help; exit 0 ;;
    -J|--jpg) opt_type='jpg'; arg="${args[((++a))]}" ;;
    -P|--png) opt_type='png'; arg="${args[((++a))]}" ;;
    -Q|--quiet) flg_quiet=true; flag_verbose=false; arg="${args[((++a))]}" ;;
    -V|--verbose) flg_quiet=false; flg_verbose=true; arg="${args[((++a))]}" ;;
    -m|--model)
        [ $# -le $((a+1)) ] && error "arg required: $arg" && exit 3
        opt_model="${args[((++a))]}"; arg="${args[((++a))]}" ;;
    -n|--noise)
        [ $# -le $((a+1)) ] && error "arg required: $arg" && exit 3
        opt_noise="${args[((++a))]}"; arg="${args[((++a))]}" ;;
    -q|--quality)
        [ $# -le $((a+1)) ] && error "arg required: $arg" && exit 3
        opt_qual="${args[((++a))]}"; arg="${args[((++a))]}" ;;
    -s|--scale)
        [ $# -le $((a+1)) ] && error "arg required: $arg" && exit 3
        opt_scale="${args[((++a))]}"; arg="${args[((++a))]}" ;;
    -[HJPQV]*)
        [[ ! "${arg:2:1}" =~ [HJPQVmnqs] ]] && error "unknown option: ${arg:2:1}"
        args[a--]="-${arg:2}"; arg="${arg:0:2}" ;;
    -[mnqs]*) args[a]="${arg:2}"; arg="${arg:0:2}"; ((a--)) ;;
    --) ((a++)); break ;;
    *) break ;;
esac; done
args=("${args[@]:a}")

for req in "${reqs[@]}"; do if ! command -v "$req" &>/dev/null; then
    error "missing requirement: $req"
fi; done

# set upscale model:
opt_model="${opt_model,,}"
if [ "$opt_model" = 'anime' ]; then
    model="${path_models}upconv_7_anime_style_art_rgb"
elif [ "$opt_model" = 'cunet' ]; then
    model="${path_models}cunet"
elif [ "$opt_model" = 'photo' ]; then
    model="${path_models}upconv_7_photo"
else
    error "invalid model: $opt_model"
fi

# check options:
[ ! -d "$model" ] && error "invalid model dir: $model"
[[ ! "$opt_noise" =~ ^(-1|0|1|2|3)$ ]] && error "invalid denoise level: $opt_noise"
[[ ! "$opt_scale" =~ ^(1|2|4|16|32)$ ]] && error "invalid upscale level: $opt_scale"
[[ ! "$opt_qual" =~ ^([1-9]|[1-9][0-9]|100)$ ]] && error "invalid jpg quality: $opt_qual"

# set cleanup trap:
trap exit INT
trap 'rm -f "$img_tmp"' EXIT

for img in "${args[@]}"; do
    ! is_img "$img" && msg_error "invalid image: $img" && continue

    # set output image name and extension:
    if [ -n "$opt_type" ]; then
        ext="$opt_type"
    else
        ext="${img##*.}"
        ext="${ext,,}"
        [ -z "$ext" ] || [ "$ext" = 'jpeg' ] && ext='jpg'
    fi
    img_out="${img%.*}_u${opt_scale}n${opt_noise}${opt_model:0:1}.${ext}"

    # upscale image:
    img_tmp="$(mktemp --tmpdir XXX.png)"
    flg_success=false
    [ "$flg_quiet" = 'false' ] && msg_to "$img" "$img_out"
    [ "$flg_verbose" = true ] && msg_cmd "waifu2x-ncnn-vulkan -m $model -s $opt_scale -n $opt_noise -i $img -o ${img_tmp}"
    waifu2x-ncnn-vulkan -m "$model" -s "$opt_scale" -n "$opt_noise" -i "$img" -o "${img_tmp}" &>/dev/null && flg_success=true
    [ "$flg_quiet" = 'false' ] && [ "$flg_success" = 'false' ] &&  msg_error "$img" && continue

    # convert to jpg:
    if [ "$ext" = 'jpg' ]; then
        [ "$flg_verbose" = true ] && msg_cmd "magick $img_tmp -quality $opt_qual $img_out"
        magick "$img_tmp" -quality "$opt_qual" "$img_out"
    else
        [ "$flg_verbose" = true ] && msg_cmd "cp $img_tmp $img_out"
        cp "$img_tmp" "$img_out"
    fi
    rm "$img_tmp"
done

# vim:ft=bash
