#!/bin/bash
## img-upscale ::

[[ $0 != "${BASH_SOURCE[0]}" ]] && return 0
print_help() { cat <<'HELPDOC'
Usage:
  img-upscale [option...] <image...>

Upscale and/or sharpen images with waifu2x.

Options:
  -m, --model <model>   upscale model (a/anime/c/cunet/p/photo, default: cunet)
  -n, --noise <level>   denoise level (-1/0/1/2/3, default=0)
  -q, --quality <level> jpg quality level (0-100, default=92)
  -s, --scale <level>   upscale level (1/2/4/8/16/32, default=2)
  -J, --jpg             output to jpg file
  -L, --list            print machine readable list of upscaled images to stdout
  -P, --png             output to png file
  -M, --nocolor         disable colored output
  -Q, --quiet           print nothing to stdout
  -V, --verbose         print more verbose information
  -H, -h, --help        print help and exit

Environment:
  NO_COLOR      disable colored output
  QUIET         run silently
  VERBOSE       run verbosely
HELPDOC
exit "${1:-0}" ;}
[[ $1 =~ ^(-H|-h|--help)$ ]] && print_help

## settings ::
debug=0 dryrun=0 list=0 nocolor=0 quiet=0 verbose=0
bin_waifu2x='waifu2x-ncnn-vulkan'
path_models="/usr/share/$bin_waifu2x"
model=cunet noise=0 quality=92 scale=2

## internal functions/variables ::
readonly -a args=("$@")
readonly -a deps=("$bin_waifu2x" identify magick)
readonly -a opts=(
    -m: --model: -n: --noise: -o: --output: -q: --quality: -s: --scale: -L --list
    -J --jpg -P --png -H -h --help -M --nocolor -Q --quiet -V --verbose)
readonly script="$(realpath "$BASH_SOURCE")"
args_options=() args_positionals=()
dir_model=
img_out=
imgs=()
imgs_err=()
type=
imgs_tmp=()

# colors:
black=$'\e[38;5;0m' blue=$'\e[38;5;12m' cyan=$'\e[38;5;14m'
green=$'\e[38;5;10m' grey=$'\e[38;5;8m' magenta=$'\e[38;5;13m'
orange=$'\e[38;5;3m' red=$'\e[38;5;9m' white=$'\e[38;5;15m'
yellow=$'\e[38;5;11m' bold=$'\e[1m' off=$'\e[0m'
clear_colors() {
    export NO_COLOR=true; nocolor=1
    unset black blue cyan green grey magenta orange red white yellow bold off
}

# messages:
msg() { printf "$bold$blue=> $off$white%s$off\n" "$*" ;}
msg2() { printf "$bold$blue > $off$white%s$off\n" "$*" ;}
msg_error() { printf "$bold${red}E: $off$white%s$off\n" "$*" >&2 ;}
msg_good() { printf "$bold$green=> $off$white%s$off\n" "$*" ;}
msg_plain() { printf "$off$white  %s$off\n" "$*" ;}
msg_warn() { printf "$bold${yellow}W: $off$white%s$off\n" "$*" >&2 ;}
msg_cmd() {
    local _printf='printf'; [[ -f /usr/bin/printf ]] && _printf='/usr/bin/printf'
    [[ $EUID -eq 0 ]] && printf "$bold$red:#" || printf "$bold$blue:$"
    printf "$off$white"; "$_printf" ' %q' "$@"; printf "$off\n"
}

# utils:
check_deps() {
    local deps_err=()
    for dep in "${deps[@]}"; do is_cmd "$dep" || deps_e+=("$dep"); done
    [[ ${#deps_err} -gt 0 ]] && msg_error "missing deps: ${deps_err[*]}"
    return ${#deps_err[@]}
}
is_cmd() { command -v "$1" &>/dev/null ;}
is_img() { [[ -f $1 ]] && identify "$1" &>/dev/null ;}

parse_args() {
    local a=0 opt= sflgs= sopts= arg="${args[0]}"
    local -a lflgs=() lopts=()
    args_options=() args_positionals=()
    bad_opt() { msg_error "unrecognized option: -${arg:2:1}" ;}
    bad_optarg() { msg_error "option requires an argument: $arg" ;}
    bad_flg() { msg_error "option does not take argument: ${arg%%=*}" ;}
    for opt in "${opts[@]}"; do case "$opt" in
        -?) sflgs="$sflgs${opt:1}" ;;
        -?:) sopts="$sopts${opt:1:1}" ;;
        *:) lopts+=("${opt:0:-1}") ;;
        *) lflgs+=("$opt") ;;
    esac; done
    while [[ -n $arg ]]; do case "$arg" in
        --) ((a++)); break ;;
        -[$sflgs]) args_options+=("$arg") ;;
        -[$sflgs]*) [[ ! $sflgs$sopts =~ ${arg:2:1} ]] && { bad_opt; return 3 ;}
            args_options+=("${arg:0:2}") arg="-${arg:2}"; continue ;;
        -[$sopts]) [[ $((${#args[@]}-a)) -le 1 ]] && { bad_optarg; return 3 ;}
            args_options+=("$arg" "${args[((++a))]}") ;;
        -[$sopts]*) args_options+=("${arg:0:2}" "${arg:2}") ;;
        *=*) [[ " ${lflgs[*]} " =~ " ${arg%%=*} " ]] && { bad_flg; return 3 ;}
            [[ " ${lopts[*]} " =~ " ${arg%%=*} " ]] || break
            args_options+=("${arg%%=*}" "${arg#*=}") ;;
        *) if [[ " ${lflgs[*]} " =~ " $arg " ]]; then
                args_options+=("$arg")
            elif [[ " ${lopts[*]} " =~ " $arg " ]]; then
                [[ ${#args[@]} -le $((a+1)) ]] && { bad_optarg; return 3 ;}
                args_options+=("$arg" "${args[((++a))]}")
            else break; fi ;;
    esac; arg="${args[((++a))]}"; done
    args_positionals=("${args[@]:a}")
}

parse_path() {
    path_basename="$path" path_dir= path_ext=
    [[ ${path_basename: -1} == / ]] && path_basename="${path_basename:0:-1}"
    if [[ $path_basename =~ / ]]; then
        path_dir="${path_basename%/*}/" path_basename="${path_basename##*/}"
        [[ ${path_dir:0:2} == ./ ]] && path_dir="${path_dir:2}"
    fi; path_name="$path_basename"
    if [[ $path_basename =~ ^(.+)(\..*) ]]; then
        path_ext="${BASH_REMATCH[2]}" path_name="${BASH_REMATCH[1]}"
    fi
}

# error, exit, trap:
error() { msg_error "$*"; exit 3 ;}
trap_exit() { rm -f "${imgs_tmp[@]}" ;}
trap_int() { printf '\n'; ((debug)) && msg_warn '[sigint]'; exit 99 ;}

## main ::
trap trap_int INT
trap trap_exit EXIT

# set from env:
[[ -n $DEBUG ]] && debug=1
[[ -n $NO_COLOR || ! -t 1 || ! -t 2 ]] && clear_colors
[[ -n $QUIET ]] && quiet=1 verbose=0
[[ -n $VERBOSE ]] && quiet=0 verbose=1

# parse args:
parse_args || exit
set -- "${args_options[@]}"
while [[ -n $1 ]]; do case "$1" in
    -m|--model) shift; model="${1,,}" ;;
    -n|--noise) shift; noise="$1" ;;
    -q|--quality) shift; quality="$1" ;;
    -s|--scale) shift; scale="$1" ;;
    -J|--jpg) type='jpg' ;;
    -L|--list) list=1 quiet=1 verbose=0 ;;
    -P|--png) type='png' ;;
    -Q|--quiet) quiet=1 verbose=0 ;;
    -V|--verbose) quiet=0; ((verbose++)) ;;
    -M|--nocolor) clear_colors ;;
    -h|-H|--help) print_help ;;
esac; shift; done

# check for errors:
check_deps || exit
[[ $model =~ ^(a|anime|c|cunet|p|photo)$ ]] || error "invalid model: $model"
[[ $noise =~ ^(-1|0|1|2|3)$ ]] || error "invalid denoise level: $noise"
[[ $quality =~ ^([1-9]|[1-9][0-9]|100)$ ]] || error "invalid jpg quality: $quality"
[[ $scale =~ ^(1|2|4|16|32)$ ]] || error "invalid upscale level: $scale"

# set model directory:
case "$model" in
    a|anime) dir_model="$path_models/models-upconv_7_anime_style_art_rgb" ;;
    c|cunet) dir_model="$path_models/models-cunet" ;;
    p|photo) dir_model="$path_models/models-upconv_7_photo" ;;
esac

# check positional args:
for arg in "${args_positionals[@]}"; do
    dup=0; for i in "${imgs[@]}"; do [[ $i == $arg ]] && { dup=1; break ;}; done
    ((dup)) && continue
    is_img "$arg" || { imgs_err+=("$arg"); continue ;}
    imgs+=("$arg")
done
[[ -n $imgs_err ]] && msg_warn "image error: ${imgs_err[*]}"

# upscale images:
for img in "${imgs[@]}"; do
    imgs_tmp=()

    # parse output image name/type:
    path="$img"
    parse_path
    ext="${path_ext,,}"
    [[ -n $type ]] && ext=".${type,,}"
    [[ -z $ext ]] && ext='.png'
    [[ $ext == .jpeg ]] && ext='.jpg'
    img_out="${path_dir}${path_name}_u$scale${model:0:1}$noise$ext"
    ((quiet)) || msg "$img $bold$blue->$off$white $img_out"

    # convert input image to png if it's not a jpg, png, or webp:
    if [[ ! $(file -ib "$img") =~ image/(jpeg|png|webp) ]]; then
        img_tmp="$(mktemp --tmpdir XXX.png)"
        imgs_tmp+=("$img_tmp")
        ((verbose)) && msg_cmd magick "$img" "$img_tmp"
        magick "$img" "$img_tmp"
        img="$img_tmp"
    fi

    # upscale image:
    img_tmp="$(mktemp --tmpdir XXX.png)"
    imgs_tmp+=("$img_tmp")
    cmd_waifu2x=("$bin_waifu2x" -m "$dir_model" -s "$scale" -n "$noise" -i "$img" -o "${img_tmp}")
    if ((verbose)); then
        msg_cmd "${cmd_waifu2x[@]}"
        if [[ $verbose -gt 1 ]]; then
            "${cmd_waifu2x[@]}"
        else
            "${cmd_waifu2x[@]}" &>/dev/null
        fi
    else
        "${cmd_waifu2x[@]}" &>/dev/null
    fi

    if (($?)); then
        # upscale error:
        msg_error "waifu2x error: $img"
    else
        # convert/copy upscaled image:
        if [[ $ext == .png ]]; then
            ((verbose)) && msg_cmd cp "$img_tmp" "$img_out"
            cp "$img_tmp" "$img_out"
        else
            ((verbose)) && msg_cmd magick "$img_tmp" "$img_out"
            magick "$img_tmp" "$img_out"
        fi
        ((list)) && printf '%s\n' "$img_out"
    fi

    rm -f "${imgs_tmp[@]}"
done


# vim:ft=bash
