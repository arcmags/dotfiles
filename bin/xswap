#!/bin/bash
## xswap ::

[[ $0 != "${BASH_SOURCE[0]}" ]] && return 0
print_help() { cat <<'HELPDOC'
Usage:
  xswap

Swap left/right xserver displays.

Environment:
  NO_COLOR      disable colored output
  QUIET         run silently
  VERBOSE       run verbosely
HELPDOC
exit "${1:-0}" ;}
[[ $1 =~ ^(-H|-h|--help)$ ]] && print_help

## settings ::
debug=0 nocolor=0 quiet=0 verbose=0

## internal functions/variables ::
readonly -a deps=(xrandr xset)

# colors:
black=$'\e[38;5;0m' blue=$'\e[38;5;12m' cyan=$'\e[38;5;14m'
green=$'\e[38;5;10m' grey=$'\e[38;5;8m' magenta=$'\e[38;5;13m'
orange=$'\e[38;5;3m' red=$'\e[38;5;9m' white=$'\e[38;5;15m'
yellow=$'\e[38;5;11m' bold=$'\e[1m' off=$'\e[0m'
clear_colors() {
    export NO_COLOR=true; nocolor=1
    unset black blue cyan green grey magenta orange red white yellow bold off
}

# messages:
msg() { printf "$bold$blue=> $off$white%s$off\n" "$*" ;}
msg2() { printf "$bold$blue > $off$white%s$off\n" "$*" ;}
msg_error() { printf "$bold${red}E: $off$white%s$off\n" "$*" >&2 ;}
msg_good() { printf "$bold$green=> $off$white%s$off\n" "$*" ;}
msg_plain() { printf "$off$white  %s$$off\n" "$*" ;}
msg_warn() { printf "$bold${yellow}W: $off$white%s$off\n" "$*" >&2 ;}
msg_cmd() {
    local _printf='printf'; [[ -f /usr/bin/printf ]] && _printf='/usr/bin/printf'
    [[ $EUID -eq 0 ]] && printf "$bold$red:#" || printf "$bold$blue:$"
    printf "$off$white"; "$_printf" ' %q' "$@"; printf "$off\n"
}

# utils:
check_deps() {
    local deps_err=()
    for dep in "${deps[@]}"; do is_cmd "$dep" || deps_e+=("$dep"); done
    [[ ${#deps_err} -gt 0 ]] && msg_error "missing deps: ${deps_err[*]}"
    return ${#deps_err[@]}
}
is_cmd() { command -v "$1" &>/dev/null ;}

# error, exit, trap:
error() { msg_error "$*"; exit 3 ;}
trap_exit() { ((debug)) && msg_warn '[exit]' ;}
trap_int() { printf '\n'; msg_error '[sigint]'; exit 99 ;}

## main ::
trap trap_int INT
trap trap_exit EXIT

# set from env:
[[ -n $DEBUG ]] && debug=1
[[ -n $NO_COLOR || ! -t 1 || ! -t 2 ]] && clear_colors
[[ -n $QUIET ]] && quiet=1 verbose=0
[[ -n $VERBOSE ]] && quiet=0 verbose=1

# check for errors:
check_deps || exit
xset q &>/dev/null || error 'xserver not found'
[[ -n $1 ]] && error "unknown arg: $1"

# get displays:
cmd_sed=(sed -E 's/^([^ ]+) connected[^0-9]+[0-9x]+\+([0-9]+).*/\1 \2/;t;d')
mapfile -t displays < <(xrandr | "${cmd_sed[@]}")
((debug)) && { msg_warn "displays:$(printf " '%s'" "${displays[@]}")" ;}
[[ ${#displays[@]} -ne 2 ]] && exit

# set displays:
display0="${displays[0]% *}" display1="${displays[1]% *}"
if [[ ${displays[0]#* } -gt ${displays[1]#* } ]]; then
    display0="${displays[1]% *}" display1="${displays[0]% *}"
fi

# swap displays:
((debug)) && { msg_warn "xrandr --output $display0 --right-of $display1"; exit ;}
((quiet)) || msg "$display1 $bold$blue--$off$white $display0"
((verbose)) && msg_cmd xrandr --output "$display0" --right-of "$display1"
xrandr --output "$display0" --right-of "$display1"

# reload background:
[[ -f $HOME/.fehbg ]] && "$HOME/.fehbg"

# vim:ft=bash
